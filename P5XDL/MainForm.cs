using System.Configuration;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text.Json.Nodes;

namespace P5XDLForm
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            GetFromGit();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void progressBar1_Click(object sender, EventArgs e)
        {

        }

        async void GetFromGit()
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);

            var pathString = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\";
            pathString = pathString.Replace("plugins\\", "Translation\\en\\Text\\");
            var appConf = pathString.Replace("BepInEx\\Translation\\en\\Text\\", "P5X_Data\\");
            var clientL = File.ReadAllLines(appConf + "app.info").Skip(1).FirstOrDefault();

            //Set Client Language
            if (clientL == "p5x") { clientL = "CN"; }
            else
            {
                clientL = clientL.Substring(clientL.IndexOf("_"));
                clientL = clientL.ToUpper();
                clientL = clientL.Substring(1, clientL.Length - 1);
            }

            var language = config.AppSettings.Settings["Language"].Value = clientL;
            config.Save();

            bool includeAutoGen = Boolean.Parse(config.AppSettings.Settings["AutoGen"].Value);
            bool downloadImages = Boolean.Parse(config.AppSettings.Settings["DownloadImages"].Value);
            var latestCommit = config.AppSettings.Settings["LatestCommit"].Value;

            var fileString = "https://api.github.com/repos/JayJay34/P5XTranslate/contents/" + language;
            var commitString = "https://api.github.com/repos/JayJay34/P5XTranslate/commits/main";

            using var client = new HttpClient();
            {
                client.DefaultRequestHeaders.Clear();
                client.DefaultRequestHeaders.Add("User-Agent", "Other");

                var content = await client.GetStringAsync(commitString);
                var jObj = JsonNode.Parse(content);

                if (latestCommit != jObj["sha"].ToString())
                {

                    config.AppSettings.Settings["LatestCommit"].Value = jObj["sha"].ToString();
                    config.Save();

                    content = await client.GetStringAsync(fileString);
                    jObj = JsonNode.Parse(content);

                    var fileCount = jObj.AsArray().Count() - 1;
                    downloadPB.Step = 100 / fileCount;
                    var currentFile = 1;

                    //Remove files in the directory
                    System.IO.DirectoryInfo folder = new DirectoryInfo(pathString);
                    foreach (FileInfo file in folder.EnumerateFiles())
                    {
                        if (file.Name != "_AutoGeneratedTranslations.txt")
                        {
                            file.Delete();
                        }
                    }

                    foreach (var obj in jObj.AsArray())
                    {
                        if (obj["name"].ToString() != "_AutoGeneratedTranslations.txt" || obj["name"].ToString() == "_AutoGeneratedTranslations.txt" && includeAutoGen)
                        {
                            downloadTxt.Text = obj["name"].ToString() + " (" + currentFile + "/" + fileCount + ")";
                            var fileDownload = await client.GetStringAsync(obj["download_url"].ToString());
                            File.WriteAllText(pathString + obj["name"].ToString(), fileDownload);

                            currentFile++;
                            downloadPB.PerformStep();
                        }
                    }
                }
                downloadPB.Value = 100;
                okBtn.Enabled = true;

            }
            this.Close();
        }
    }
}